name: Dineo Deployment pipeline
on:
  push:
    branches:
      - main
  pull_request:
    types: [closed, synchronize, opened]
    branches:
      - main
    paths:
      - 'README.md'
      - ".github/workflows/**"

env:
  name: ${{secrets.NAME}}
  API_URL: ${{secrets.API_URL}}
  PORT: ${{secrets.PORT}}

jobs:
    build-unity-app:
        name:  Build Unity App
        runs-on: ubuntu-latest
        defaults:
          run:
            working-directory: ./app1
        env:
            AUTH_SECRET: 'Dineo'
            AUTH_URL: 'Dineo'
            DATABASE_URL: 'Dineo'
            PORT: 7600
    build-next-app:
        needs: build-unity-app
        name:  Build Next App
        strategy:
          matrix:
            os: [ubuntu-latest,macos-latest]
            node-version: [20.12.0]
            java-version: [8.x, 11.x]
            ruby-version: [2.7.1, 2.8.x]
            php-version: [7.4.x, 8.0.x]
        runs-on: ${{ matrix.os }}
        defaults:
          run:
            working-directory: ./app1
        env:
            AUTH_SECRET: 'Dineo'
            AUTH_URL: 'Dineo'
            DATABASE_URL: 'Dineo'
            PORT: 7600
        steps:
            - name: Remove code from remote repo and bring it here 
              uses: actions/checkout@v4.2.1 
            - name: Build and Push Docker Image
              uses: mitch1009/docker-trigger@main
              id: build_image
              with:
                git_token: ${{ secrets.GITHUN_TOKEN }}
                release_name: 'your-release-name' # Im most cased this will be the image tag
                release_version: '1.0.0' # It can be output from a version extracted from the codebase
                docker_image_vendor: 'your-org'
                docker_context_path: 'path/to/docker/context' # i.e ./
                
            - name: create env file
              working-directory: ./app1
              shell: bash
              env:
                PORT: 3000
                NAME: dineo-app
              id: create-env-file
              run: |
                echo "
                    PORT=3000
                    TAGS=${{ steps.build_image.outputs.tags }}
                    NODE_ENV=development
                    NEXT_PUBLIC_API_URL=http://localhost:3000
                " >> .env
            - name: Create a new next app
              run: npx create-next-app@latest name --use-pnpm 
            - name: Run a sample bash script
              run: echo "Hello, world!"
            - name: Run hello world python script
              run: echo "Hello, world!"
    